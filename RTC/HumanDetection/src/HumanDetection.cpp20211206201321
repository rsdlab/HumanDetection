// -*- C++ -*-
/*!
 * @file  HumanDetection.cpp
 * @brief ModuleDescription
 * @date $Date$
 *
 * $Id$
 */

#include "HumanDetection.h"

// Module specification
// <rtc-template block="module_spec">
static const char* humandetection_spec[] =
  {
    "implementation_id", "HumanDetection",
    "type_name",         "HumanDetection",
    "description",       "ModuleDescription",
    "version",           "1.0.0",
    "vendor",            "VenderName",
    "category",          "Motion Capture",
    "activity_type",     "PERIODIC",
    "kind",              "DataFlowComponent",
    "max_instance",      "1",
    "language",          "C++",
    "lang_type",         "compile",
    ""
  };
// </rtc-template>

/*!
 * @brief constructor
 * @param manager Maneger Object
 */
HumanDetection::HumanDetection(RTC::Manager* manager)
    // <rtc-template block="initializer">
  : RTC::DataFlowComponentBase(manager),
    m_StopCommandOut("StopCommand", m_StopCommand)

    // </rtc-template>
{
}

/*!
 * @brief destructor
 */
HumanDetection::~HumanDetection()
{
}



RTC::ReturnCode_t HumanDetection::onInitialize()
{
  // Registration: InPort/OutPort/Service
  // <rtc-template block="registration">
  // Set InPort buffers

  // Set OutPort buffer
  addOutPort("StopCommand", m_StopCommandOut);

  // Set service provider to Ports

  // Set service consumers to Ports

  // Set CORBA Service Ports

  // </rtc-template>

  // <rtc-template block="bind_config">
  // </rtc-template>

  tdv::nuitrack::Nuitrack::init("");

  return RTC::RTC_OK;
}


RTC::ReturnCode_t HumanDetection::onFinalize()
{
  return RTC::RTC_OK;
}

/*
RTC::ReturnCode_t HumanDetection::onStartup(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t HumanDetection::onShutdown(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

RTC::TimedBoolean m_StopCommand;

void onHandUpdate(tdv::nuitrack::HandTrackerData::Ptr handData)
  {
    if (!handData)
      {
        // No hand data
        std::printf("No hand data\n");
        m_StopCommand.data=0;
        return;
      }

    auto userHands = handData->getUsersHands();

    if (userHands.empty())
      {
        // No user hands
        std::printf("No user hands\n");
        m_StopCommand.data=0;
        return;
      }

    auto rightHand = userHands[0].rightHand;

    if (!rightHand)
      {
        // No right hand
        std::printf("Right hand of the first user is not found\n");
        m_StopCommand.data=0;
        return;
      }

    std::printf("Right hand position: %f, %f, %f\n", rightHand->xReal, rightHand->yReal, rightHand->zReal);

    if(rightHand->zReal < 1000)
      {
        m_StopCommand.data=1;
        std::printf("**********************************\n");
        return;
      }
    else
      {
        m_StopCommand.data=0;
        return;
      }
    // m_StopCommandOut.write();
}

RTC::ReturnCode_t HumanDetection::onActivated(RTC::UniqueId ec_id)
{
  handTracker = tdv::nuitrack::HandTracker::create();
  handTracker->connectOnUpdate(std::bind(onHandUpdate, std::placeholders::_1));
  tdv::nuitrack::Nuitrack::run();
  return RTC::RTC_OK;
}


RTC::ReturnCode_t HumanDetection::onDeactivated(RTC::UniqueId ec_id)
{
  tdv::nuitrack::Nuitrack::release();
  return RTC::RTC_OK;
}


RTC::ReturnCode_t HumanDetection::onExecute(RTC::UniqueId ec_id)
{
  while(1)
    {
      std::printf("Wait update now\n");
      tdv::nuitrack::Nuitrack::waitUpdate(handTracker);
      // m_StopCommand.data = handTracker->connectOnUpdate(std::bind(onHandUpdate, std::placeholders::_1));

      // a = handTracker->connectOnUpdate(std::bind(onHandUpdate, std::placeholders::_1));
      // if(a)
      //   {
      //     m_StopCommand.data=1;
      //     std::printf("**********************************\n");
      //   }
      // else
      //   {
      //     m_StopCommand.data=0;
      //   }
      std::printf("%d\n", m_StopCommand.data);
      m_StopCommandOut.write();
    }
  return RTC::RTC_OK;
}

/*
RTC::ReturnCode_t HumanDetection::onAborting(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t HumanDetection::onError(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t HumanDetection::onReset(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t HumanDetection::onStateUpdate(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/

/*
RTC::ReturnCode_t HumanDetection::onRateChanged(RTC::UniqueId ec_id)
{
  return RTC::RTC_OK;
}
*/



extern "C"
{

  void HumanDetectionInit(RTC::Manager* manager)
  {
    coil::Properties profile(humandetection_spec);
    manager->registerFactory(profile,
                             RTC::Create<HumanDetection>,
                             RTC::Delete<HumanDetection>);
  }

};


